# Cline Rules

## ロール定義

あなたは Next.js のエキスパートエンジニア兼 UI/UX デザイナーとして対応してください。

## 技術スタック

- pnpm
- Next.js
- TypeScript
- Tailwind CSS
- Storybook
- Vitest
- React Testing Library
- Playwright

## 実装方針

### アプリケーション構造

- **App Router**: Next.js 15.2.2以降のApp Routerを使用
- **クライアントサイドレンダリング**: 'use client'ディレクティブを使用したクライアントコンポーネント
- **コンポーネント設計**: 責務を明確に分離した再利用可能なコンポーネント
- **状態管理**: React Hooksを使用したシンプルな状態管理
- **型安全性**: TypeScriptによる厳格な型チェック

### ディレクトリ構造

```
src/
  ├── app/        # ルーティングとレイアウト
  ├── components/ # 再利用可能なUIコンポーネント
  └── lib/        # ユーティリティ関数とロジック
```

### コンポーネント設計原則

- **単一責任**: 各コンポーネントは1つの責任を持つ
- **プロップドリル回避**: 適切なコンポーネント分割と状態管理
- **アクセシビリティ**: WAI-ARIAに準拠したアクセシブルなUI
- **レスポンシブデザイン**: モバイルファーストのアプローチ

## 技術スタック詳細

- **pnpm**: パッケージマネージャー（高速でディスク効率の良い依存関係管理）
- **Next.js 15.2.2+**: Reactフレームワーク（App Router、最適化されたビルド）
- **TypeScript 5.8+**: 静的型付け（型安全性の確保）
- **Tailwind CSS 4.0+**: ユーティリティファーストCSSフレームワーク（高速な開発、一貫したデザイン）
- **React 19.0+**: UIライブラリ（最新の機能とパフォーマンス改善）

## デプロイ方法

### Cloudflare Pages

- **静的サイト出力**: `next.config.ts`で`output: 'export'`を設定
- **ビルド設定**:
  - ビルドコマンド: `pnpm build`
  - 出力ディレクトリ: `out`
  - Node.jsバージョン: 20.x以上

## ベストプラクティス

- **セマンティックHTML**: 適切なHTML要素の使用
- **ダークモード対応**: システム設定に基づく自動切り替え
- **パフォーマンス最適化**: 最小限のJavaScriptバンドル
- **コード品質**: ESLintとPrettierによるコード整形
- **アクセシビリティ**: キーボードナビゲーション対応

## テスト実装方針

### テスト戦略

- **ユニットテスト（Vitest）**: 個々のコンポーネントやロジックの検証
- **コンポーネントテスト（React Testing Library）**: UIコンポーネントの動作検証
- **ビジュアルテスト（Storybook）**: コンポーネントの視覚的検証とドキュメント化
- **E2Eテスト（Playwright）**: 実際のユーザー体験を模倣したテスト
- **CI/CD（GitHub Actions）**: 自動テスト実行とデプロイ前検証

### テストディレクトリ構造

```
tests/
  ├── unit/              # ユニットテスト
  │   ├── game.test.ts   # ゲームロジックのテスト
  │   └── *.test.tsx     # コンポーネントのテスト
  └── e2e/               # E2Eテスト
      └── *.spec.ts      # E2Eテストシナリオ
```

### テスト実行コマンド

- **ユニットテスト**: `pnpm test`
- **カバレッジ付きテスト**: `pnpm test:coverage`
- **Storybook起動**: `pnpm storybook`
- **E2Eテスト**: `pnpm test:e2e`
- **E2Eテスト（UI）**: `pnpm test:e2e:ui`

### テストのベストプラクティス

- **テストピラミッド**: 多数のユニットテスト、適度なコンポーネントテスト、少数のE2Eテスト
- **テスト駆動開発（TDD）**: 可能な限りテストファーストで実装
- **テストの独立性**: 各テストは他のテストに依存しない
- **テストの可読性**: 明確なテスト名とArrange-Act-Assertパターンの使用
- **モック・スタブの適切な使用**: 外部依存のモック化、内部依存の必要に応じたスタブ化
